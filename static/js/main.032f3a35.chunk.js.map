{"version":3,"sources":["components/navbar.jsx","components/counterV4.jsx","components/countersV2.jsx","components/counters.jsx","App.js","reportWebVitals.js","components/counter.jsx","components/counterV2.jsx","components/conditionalRender.jsx","index.js"],"names":["NavBar","Navbar","bg","Container","Brand","href","Badge","pill","className","this","props","totalCounters","React","Component","CounterV4","getBadgeClasses","formatCount","Button","onClick","onIncrement","counter","variant","onDelete","id","size","classes","value","count","Counters","onReset","onAddNew","counters","map","selected","App","state","handleIncrement","index","indexOf","setState","handleReset","c","handleDelete","counterId","console","log","filter","handleAddNew","nextID","length","concat","Fragment","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.032f3a35.chunk.js","sourcesContent":["import React, { Component } from \"react\";\r\nimport { Navbar, Container } from \"react-bootstrap\";\r\nimport Badge from \"react-bootstrap/Badge\";\r\n\r\nclass NavBar extends React.Component {\r\n  render() {\r\n    return (\r\n      <Navbar bg=\"light\">\r\n        <Container>\r\n          <Navbar.Brand href=\"#home\">\r\n            Counter App{\" \"}\r\n            <Badge pill bg=\"dark\" className=\"m-2\">\r\n              {this.props.totalCounters}\r\n            </Badge>\r\n          </Navbar.Brand>\r\n        </Container>\r\n      </Navbar>\r\n    );\r\n  }\r\n}\r\n\r\nexport default NavBar;\r\n","import React, { Component } from 'react';\r\n\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Badge from \"react-bootstrap/Badge\";\r\n\r\nclass CounterV4 extends React.Component {\r\n  \r\n     render() {\r\n        return (\r\n          <div>\r\n            <Badge bg={this.getBadgeClasses()} className=\"m-2\">{this.formatCount()}</Badge>\r\n            <Button onClick= {() => this.props.onIncrement(this.props.counter)} className=\"m-2\" variant=\"secondary\">Increment</Button>\r\n            <Button onClick= {() => this.props.onDelete(this.props.counter.id)} className=\"m-2\" variant=\"danger\" size=\"sm\">Delete</Button>\r\n          </div>\r\n        );\r\n      }\r\n\r\n      getBadgeClasses() {\r\n        let classes = \"\";\r\n        classes += this.props.counter.value === 0 ? \"warning\" : \"primary\";\r\n        return classes;\r\n    }\r\n\r\n    formatCount(){\r\n        const { value: count } = this.props.counter; \r\n        return count === 0 ? 'Zero' : count; // destructure\r\n  }\r\n}\r\n \r\nexport default CounterV4;","import React, { Component } from \"react\";\r\n//import CounterV3 from \"./counterV3\";\r\nimport CounterV4 from \"./counterV4\";\r\nimport Button from \"react-bootstrap/Button\";\r\n\r\nclass Counters extends React.Component {\r\n  \r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Button\r\n          onClick={this.props.onReset}\r\n          className=\"m-2\"\r\n          variant=\"primary\"\r\n        >\r\n          Reset\r\n        </Button>\r\n        <Button\r\n          onClick={this.props.onAddNew}\r\n          className=\"m-2\"\r\n          variant=\"info\"\r\n        >\r\n          Add New\r\n        </Button>\r\n        {this.props.counters.map((counter) => (\r\n          //   <CounterV3 key={counter.id} onDelete={this.handleDelete} id={counter.id} value={counter.value} selected={true} />\r\n          <CounterV4\r\n            key={counter.id}\r\n            onDelete={this.props.onDelete}\r\n            onIncrement={this.props.onIncrement}\r\n            counter={counter}\r\n            selected={true}\r\n          />\r\n        ))}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Counters;\r\n","import React, { Component } from \"react\";\r\n//import CounterV3 from \"./counterV3\";\r\nimport CounterV4 from \"./counterV4\";\r\nimport Button from \"react-bootstrap/Button\";\r\n\r\nclass Counters extends React.Component {\r\n  state = {\r\n    counters: [\r\n      { id: 1, value: 2 },\r\n      { id: 2, value: 0 },\r\n      { id: 3, value: 0 },\r\n      { id: 4, value: 0 },\r\n    ],\r\n  };\r\n\r\n  // best solution\r\n  handleIncrement = (counter) => {\r\n    const counters = [...this.state.counters];\r\n    const index = counters.indexOf(counter);\r\n    counters[index] = { ...counter };\r\n    counters[index].value++;\r\n    this.setState({ counters });\r\n\r\n    //console.log(\"counter\", counter);\r\n    //this.setState({value : this.state.value+1});\r\n  };\r\n\r\n  handleReset = () => {\r\n   const counters = this.state.counters.map((c) => {\r\n      c.value = 0;\r\n      return c;\r\n    });\r\n    this.setState({ counters })\r\n  };\r\n\r\n  handleDelete = (counterId) => {\r\n    console.log(\"Event Handler Called - Delete\", counterId);\r\n    const counters = this.state.counters.filter((c) => c.id !== counterId);\r\n    console.log(counters);\r\n    this.setState({ counters: counters });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Button\r\n          onClick={this.handleReset}\r\n          className=\"m-2\"\r\n          variant=\"primary\"\r\n        >\r\n          Reset\r\n        </Button>\r\n        {this.state.counters.map((counter) => (\r\n          //   <CounterV3 key={counter.id} onDelete={this.handleDelete} id={counter.id} value={counter.value} selected={true} />\r\n          <CounterV4\r\n            key={counter.id}\r\n            onDelete={this.handleDelete}\r\n            onIncrement={this.handleIncrement}\r\n            counter={counter}\r\n            selected={true}\r\n          />\r\n        ))}\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Counters;\r\n","import \"./App.css\";\nimport NavBar from \"./components/navbar\";\nimport Counters from \"./components/counters\";\nimport CountersV2 from \"./components/countersV2\";\nimport React from \"react\";\nclass App extends React.Component {\n  state = {\n    counters: [\n      { id: 1, value: 2 },\n      { id: 2, value: 0 },\n      { id: 3, value: 0 },\n      { id: 4, value: 0 },\n    ],\n  };\n\n  // best solution\n  handleIncrement = (counter) => {\n    const counters = [...this.state.counters];\n    const index = counters.indexOf(counter);\n    counters[index] = { ...counter };\n    counters[index].value++;\n    this.setState({ counters });\n\n    //console.log(\"counter\", counter);\n    //this.setState({value : this.state.value+1});\n  };\n\n  handleReset = () => {\n    const counters = this.state.counters.map((c) => {\n      c.value = 0;\n      return c;\n    });\n    this.setState({ counters });\n  };\n\n  handleDelete = (counterId) => {\n    console.log(\"Event Handler Called - Delete\", counterId);\n    const counters = this.state.counters.filter((c) => c.id !== counterId);\n    console.log(counters);\n    this.setState({ counters: counters });\n  };\n\n  handleAddNew = () => {\n    //console.log(\"Event Handler Called - handleAddNew\", this.state.counters.length);\n    let nextID = this.state.counters.length;\n    this.setState({\n      counters: this.state.counters.concat({ id: nextID+1, value: 5 })\n    })\n\n  };\n\n  render() {\n    return (\n      <React.Fragment>\n        <NavBar totalCounters = {this.state.counters.filter(c => c.value>0).length}/>\n        <main className=\"container\">\n          <CountersV2\n            counters = {this.state.counters}\n            onReset={this.handleReset}\n            onIncrement={this.handleIncrement}\n            onDelete={this.handleDelete}\n            onAddNew={this.handleAddNew}\n          />\n        </main>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React, { Component } from \"react\";\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Badge from \"react-bootstrap/Badge\";\r\n\r\nclass Counter extends React.Component {\r\n    state = {\r\n        count : 0,\r\n    };\r\n\r\n    styles = {\r\n        fontSize : 10,\r\n        fontWeight : 'bold'\r\n    }\r\n\r\n    formatZeroStyle = {\r\n        color:\"black\"\r\n      }\r\n\r\n    // solution 01\r\n    constructor(){\r\n        super();\r\n        this.handleIncrementNoArrow = this.handleIncrementNoArrow.bind(this);\r\n    }\r\n\r\n    handleIncrementNoArrow(){\r\n        console.log(\"Increment Clicked\", this);\r\n    }\r\n\r\n    // best solution\r\n    handleIncrement = () =>{\r\n       // console.log(\"Increment Clicked\", this);\r\n       this.setState({count : this.state.count+1});\r\n    }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <Badge bg={this.getBadgeClasses()} className=\"m-2\">{this.formatCount()}</Badge>\r\n        <Button onClick= {this.handleIncrement} className=\"m-2\" variant=\"secondary\">Increment</Button>\r\n      </div>\r\n    );\r\n  }\r\n\r\n    getBadgeClasses() {\r\n        let classes = \"\";\r\n        classes += this.state.count === 0 ? \"warning\" : \"primary\";\r\n        return classes;\r\n    }\r\n\r\n  formatCount(){\r\n      const { count } = this.state; \r\n      return count === 0 ? 'Zero' : count; // destructure\r\n  }\r\n\r\n}\r\n\r\nexport default Counter;\r\n","import React, { Component } from 'react';\r\n\r\nimport Button from \"react-bootstrap/Button\";\r\nimport Badge from \"react-bootstrap/Badge\";\r\n\r\nclass CounterV2 extends React.Component {\r\n\r\n    state = {\r\n        count : 0,\r\n    };\r\n\r\n     // best solution\r\n     handleIncrement = (product) =>{\r\n       // console.log(\"Product\", product);\r\n        this.setState({count : this.state.count+1});\r\n     }\r\n \r\n\r\n     render() {\r\n        return (\r\n          <div>\r\n            <Badge bg={this.getBadgeClasses()} className=\"m-2\">{this.formatCount()}</Badge>\r\n            <Button onClick= {() => this.handleIncrement({ id: 1 })} className=\"m-2\" variant=\"secondary\">Increment</Button>\r\n          </div>\r\n        );\r\n      }\r\n\r\n      getBadgeClasses() {\r\n        let classes = \"\";\r\n        classes += this.state.count === 0 ? \"warning\" : \"primary\";\r\n        return classes;\r\n    }\r\n\r\n    formatCount(){\r\n        const { count } = this.state; \r\n        return count === 0 ? 'Zero' : count; // destructure\r\n  }\r\n}\r\n \r\nexport default CounterV2;","import React, { Component } from 'react';\r\nclass ConditionalRender extends React.Component {\r\n\r\n    state = {\r\n        count : 0,\r\n        tags : [\"tag1\", \"tag2\", \"tag3\"]\r\n    };\r\n\r\n    renderTags (){\r\n        if(this.state.tags.length === 0) return <p>There are no tags!</p>;\r\n        return <ul>{this.state.tags.map(tag => <li key={tag}>{tag}</li>)}</ul>;\r\n    }\r\n\r\n    render() { \r\n        return(\r\n            <div>\r\n                {this.state.tags.length === 0 && \"Please create a new tag!\"}\r\n                 <div>{this.renderTags()}</div>;\r\n            </div>\r\n        )\r\n    }\r\n}\r\n \r\nexport default ConditionalRender;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.css';\nimport Counter from './components/counter';\nimport CounterV2 from './components/counterV2';\nimport Counters from './components/counters';\nimport ConditionalRender from './components/conditionalRender'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}